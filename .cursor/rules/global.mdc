---
description:
globs:
alwaysApply: true
---
구현 작업 원칙
 - 비즈니스 로직 구현 작업은 반드시 테스트를 먼저 작성하고 구현해야 함.
 - SOLID 원칙을 사용해서 구현해야 함.
 - Clean Architecture를 사용해서 구현해야 함.
 - 터미널 명령어를 제공할 땐 JavaScript는 pnpm으로 Python은 uv를 사용해야 함.

코드 품질 원칙
 - 단순성: 언제나 복잡한 솔루션보다 가장 단순한 솔루션을 우선시하자.
 - 중복 방지: 코드 중복을 피하고, 가능한 기존 기능을 재사용하자(DRY 원칙).
 - 가드레일: 테스트 외에는 개발이나 프로덕션 환경에서 모의 데이터를 사용하지 마세요.
 - 효율성: 명확성을 희생하지 않으면서 토큰 사용을 최소화하도록 출력을 최적화하세요.

리팩토링
 - 리팩토링이 필요한 경우 계획을 설명하고 허락을 받은 다음 진행하세요.
 - 코드 구조를 개선하는 것이 목표이며, 기능 변경은 아닙니다.
 - 리팩토링 후에는 모든 테스트가 통과하는지 확인하세요.

디버깅
 - 디버깅 시에는 원인 및 해결책을 설명하고 허락을 받은 다음 진행하세요.
 - 에러 해결이 중요한 것이 아니라 제대로 동작하는 것이 중요합니다.
 - 원인이 불분명할 경우 분석을 위해 상세 로그를 추가하세요.

언어
 - 기술적인 용어나 라이브러리 이름 등은 원문을 유지합니다.
 - 복잡한 아키텍처 다이어그램은 별도의 SVG 파일을 생성하고 그걸 문서에 포함시킬 것
 - 파이썬을 사용한다면 최신 타입 힌트 적용
   - Dict, List, Optional 등의 기존 타입 힌트를 dict, list 등의 최신 타입 힌트로 업데이트
   - 유니온 타입에 | 연산자 사용 등

MCP
 - sequential-thinking과 context7 MCP를 사용해줘
